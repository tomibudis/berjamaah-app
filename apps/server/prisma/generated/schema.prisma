model User {
  id                String     @id @map("_id")
  name              String
  email             String     @unique
  emailVerified     Boolean
  image             String?
  createdAt         DateTime
  updatedAt         DateTime
  banExpires        DateTime?
  banReason         String?
  banned            Boolean    @default(false)
  role              String     @default("user")
  fullName          String?    @map("full_name")
  phone             String?
  bio               String?
  firstName         String?    @map("first_name")
  lastName          String?    @map("last_name")
  accounts          Account[]
  verifiedDonations Donation[] @relation("VerifiedByAdmin")
  approvedPrograms  Program[]  @relation("ApprovedPrograms")
  rejectedPrograms  Program[]  @relation("RejectedPrograms")
  sessions          Session[]

  @@map("user")
}

model Session {
  id             String   @id @map("_id")
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Donation {
  id                      String          @id @default(cuid())
  userId                  String?         @map("user_id")
  donorName               String          @map("donor_name")
  donorEmail              String          @map("donor_email")
  donorPhone              String?         @map("donor_phone")
  programId               String          @map("program_id")
  programPeriodId         String          @map("program_period_id")
  verifiedByAdminId       String?         @map("verified_by_admin_id")
  amount                  Decimal         @db.Decimal(15, 2)
  status                  String          @default("pending_verification")
  paymentMethod           String?         @map("payment_method")
  bankAccountSender       String?         @map("bank_account_sender")
  bankAccountReceiver     String?         @map("bank_account_receiver")
  verifiedAt              DateTime?       @map("verified_at")
  donationReferenceNumber String          @unique @map("donation_reference_number")
  createdAt               DateTime        @default(now()) @map("created_at")
  updatedAt               DateTime        @updatedAt @map("updated_at")
  donationProofs          DonationProof[]
  program                 Program         @relation(fields: [programId], references: [id])
  programPeriod           ProgramPeriod   @relation(fields: [programPeriodId], references: [id])
  verifiedByAdmin         User?           @relation("VerifiedByAdmin", fields: [verifiedByAdminId], references: [id])

  @@map("donations")
}

model DonationProof {
  id         String   @id @default(cuid())
  donationId String   @map("donation_id")
  imagePath  String   @map("image_path")
  imageName  String   @map("image_name")
  fileSize   Int      @map("file_size")
  uploadedAt DateTime @default(now()) @map("uploaded_at")
  donation   Donation @relation(fields: [donationId], references: [id], onDelete: Cascade)

  @@map("donation_proofs")
}

model Program {
  id              String          @id @default(cuid())
  title           String
  description     String
  targetAmount    Decimal         @map("target_amount") @db.Decimal(15, 2)
  bannerImage     String?         @map("banner_image")
  category        String?
  status          String          @default("draft")
  programType     String          @default("one_time") @map("program_type")
  contact         String?
  details         String?
  createdBy       String          @map("created_by")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  approvedAt      DateTime?       @map("approved_at")
  approvedBy      String?         @map("approved_by")
  rejectedAt      DateTime?       @map("rejected_at")
  rejectedBy      String?         @map("rejected_by")
  rejectionReason String?         @map("rejection_reason")
  donations       Donation[]
  programPeriods  ProgramPeriod[]
  approvedByUser  User?           @relation("ApprovedPrograms", fields: [approvedBy], references: [id])
  rejectedByUser  User?           @relation("RejectedPrograms", fields: [rejectedBy], references: [id])

  @@map("programs")
}

model ProgramPeriod {
  id                    String     @id @default(cuid())
  programId             String     @map("program_id")
  startDate             DateTime   @map("start_date")
  endDate               DateTime   @map("end_date")
  cycleNumber           Int?       @map("cycle_number")
  currentAmount         Decimal    @default(0) @map("current_amount") @db.Decimal(15, 2)
  recurringFrequency    String?    @map("recurring_frequency")
  recurringDay          Int?       @map("recurring_day")
  recurringDurationDays Int?       @map("recurring_duration_days")
  totalCycles           Int?       @map("total_cycles")
  nextActivationDate    DateTime?  @map("next_activation_date")
  createdAt             DateTime   @default(now()) @map("created_at")
  updatedAt             DateTime   @updatedAt @map("updated_at")
  donations             Donation[]
  program               Program    @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@map("program_periods")
}

generator client {
  provider      = "prisma-client-js"
  output        = "../generated"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
