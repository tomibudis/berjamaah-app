
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Donation` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Donation
 * 
 */
export type DonationModel = runtime.Types.Result.DefaultSelection<Prisma.$DonationPayload>

export type AggregateDonation = {
  _count: DonationCountAggregateOutputType | null
  _avg: DonationAvgAggregateOutputType | null
  _sum: DonationSumAggregateOutputType | null
  _min: DonationMinAggregateOutputType | null
  _max: DonationMaxAggregateOutputType | null
}

export type DonationAvgAggregateOutputType = {
  amount: runtime.Decimal | null
}

export type DonationSumAggregateOutputType = {
  amount: runtime.Decimal | null
}

export type DonationMinAggregateOutputType = {
  id: string | null
  userId: string | null
  donorName: string | null
  donorEmail: string | null
  donorPhone: string | null
  programId: string | null
  programPeriodId: string | null
  verifiedByAdminId: string | null
  amount: runtime.Decimal | null
  status: string | null
  paymentMethod: string | null
  bankAccountSender: string | null
  bankAccountReceiver: string | null
  verifiedAt: Date | null
  donationReferenceNumber: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DonationMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  donorName: string | null
  donorEmail: string | null
  donorPhone: string | null
  programId: string | null
  programPeriodId: string | null
  verifiedByAdminId: string | null
  amount: runtime.Decimal | null
  status: string | null
  paymentMethod: string | null
  bankAccountSender: string | null
  bankAccountReceiver: string | null
  verifiedAt: Date | null
  donationReferenceNumber: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DonationCountAggregateOutputType = {
  id: number
  userId: number
  donorName: number
  donorEmail: number
  donorPhone: number
  programId: number
  programPeriodId: number
  verifiedByAdminId: number
  amount: number
  status: number
  paymentMethod: number
  bankAccountSender: number
  bankAccountReceiver: number
  verifiedAt: number
  donationReferenceNumber: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type DonationAvgAggregateInputType = {
  amount?: true
}

export type DonationSumAggregateInputType = {
  amount?: true
}

export type DonationMinAggregateInputType = {
  id?: true
  userId?: true
  donorName?: true
  donorEmail?: true
  donorPhone?: true
  programId?: true
  programPeriodId?: true
  verifiedByAdminId?: true
  amount?: true
  status?: true
  paymentMethod?: true
  bankAccountSender?: true
  bankAccountReceiver?: true
  verifiedAt?: true
  donationReferenceNumber?: true
  createdAt?: true
  updatedAt?: true
}

export type DonationMaxAggregateInputType = {
  id?: true
  userId?: true
  donorName?: true
  donorEmail?: true
  donorPhone?: true
  programId?: true
  programPeriodId?: true
  verifiedByAdminId?: true
  amount?: true
  status?: true
  paymentMethod?: true
  bankAccountSender?: true
  bankAccountReceiver?: true
  verifiedAt?: true
  donationReferenceNumber?: true
  createdAt?: true
  updatedAt?: true
}

export type DonationCountAggregateInputType = {
  id?: true
  userId?: true
  donorName?: true
  donorEmail?: true
  donorPhone?: true
  programId?: true
  programPeriodId?: true
  verifiedByAdminId?: true
  amount?: true
  status?: true
  paymentMethod?: true
  bankAccountSender?: true
  bankAccountReceiver?: true
  verifiedAt?: true
  donationReferenceNumber?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type DonationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Donation to aggregate.
   */
  where?: Prisma.DonationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Donations to fetch.
   */
  orderBy?: Prisma.DonationOrderByWithRelationInput | Prisma.DonationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DonationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Donations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Donations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Donations
  **/
  _count?: true | DonationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DonationAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DonationSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DonationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DonationMaxAggregateInputType
}

export type GetDonationAggregateType<T extends DonationAggregateArgs> = {
      [P in keyof T & keyof AggregateDonation]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDonation[P]>
    : Prisma.GetScalarType<T[P], AggregateDonation[P]>
}




export type DonationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DonationWhereInput
  orderBy?: Prisma.DonationOrderByWithAggregationInput | Prisma.DonationOrderByWithAggregationInput[]
  by: Prisma.DonationScalarFieldEnum[] | Prisma.DonationScalarFieldEnum
  having?: Prisma.DonationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DonationCountAggregateInputType | true
  _avg?: DonationAvgAggregateInputType
  _sum?: DonationSumAggregateInputType
  _min?: DonationMinAggregateInputType
  _max?: DonationMaxAggregateInputType
}

export type DonationGroupByOutputType = {
  id: string
  userId: string | null
  donorName: string
  donorEmail: string
  donorPhone: string | null
  programId: string
  programPeriodId: string
  verifiedByAdminId: string | null
  amount: runtime.Decimal
  status: string
  paymentMethod: string | null
  bankAccountSender: string | null
  bankAccountReceiver: string | null
  verifiedAt: Date | null
  donationReferenceNumber: string
  createdAt: Date
  updatedAt: Date
  _count: DonationCountAggregateOutputType | null
  _avg: DonationAvgAggregateOutputType | null
  _sum: DonationSumAggregateOutputType | null
  _min: DonationMinAggregateOutputType | null
  _max: DonationMaxAggregateOutputType | null
}

type GetDonationGroupByPayload<T extends DonationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DonationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DonationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DonationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DonationGroupByOutputType[P]>
      }
    >
  >



export type DonationWhereInput = {
  AND?: Prisma.DonationWhereInput | Prisma.DonationWhereInput[]
  OR?: Prisma.DonationWhereInput[]
  NOT?: Prisma.DonationWhereInput | Prisma.DonationWhereInput[]
  id?: Prisma.StringFilter<"Donation"> | string
  userId?: Prisma.StringNullableFilter<"Donation"> | string | null
  donorName?: Prisma.StringFilter<"Donation"> | string
  donorEmail?: Prisma.StringFilter<"Donation"> | string
  donorPhone?: Prisma.StringNullableFilter<"Donation"> | string | null
  programId?: Prisma.StringFilter<"Donation"> | string
  programPeriodId?: Prisma.StringFilter<"Donation"> | string
  verifiedByAdminId?: Prisma.StringNullableFilter<"Donation"> | string | null
  amount?: Prisma.DecimalFilter<"Donation"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFilter<"Donation"> | string
  paymentMethod?: Prisma.StringNullableFilter<"Donation"> | string | null
  bankAccountSender?: Prisma.StringNullableFilter<"Donation"> | string | null
  bankAccountReceiver?: Prisma.StringNullableFilter<"Donation"> | string | null
  verifiedAt?: Prisma.DateTimeNullableFilter<"Donation"> | Date | string | null
  donationReferenceNumber?: Prisma.StringFilter<"Donation"> | string
  createdAt?: Prisma.DateTimeFilter<"Donation"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Donation"> | Date | string
  donationProofs?: Prisma.DonationProofListRelationFilter
  program?: Prisma.XOR<Prisma.ProgramScalarRelationFilter, Prisma.ProgramWhereInput>
  programPeriod?: Prisma.XOR<Prisma.ProgramPeriodScalarRelationFilter, Prisma.ProgramPeriodWhereInput>
  verifiedByAdmin?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}

export type DonationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  donorName?: Prisma.SortOrder
  donorEmail?: Prisma.SortOrder
  donorPhone?: Prisma.SortOrderInput | Prisma.SortOrder
  programId?: Prisma.SortOrder
  programPeriodId?: Prisma.SortOrder
  verifiedByAdminId?: Prisma.SortOrderInput | Prisma.SortOrder
  amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrderInput | Prisma.SortOrder
  bankAccountSender?: Prisma.SortOrderInput | Prisma.SortOrder
  bankAccountReceiver?: Prisma.SortOrderInput | Prisma.SortOrder
  verifiedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  donationReferenceNumber?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  donationProofs?: Prisma.DonationProofOrderByRelationAggregateInput
  program?: Prisma.ProgramOrderByWithRelationInput
  programPeriod?: Prisma.ProgramPeriodOrderByWithRelationInput
  verifiedByAdmin?: Prisma.UserOrderByWithRelationInput
}

export type DonationWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  donationReferenceNumber?: string
  AND?: Prisma.DonationWhereInput | Prisma.DonationWhereInput[]
  OR?: Prisma.DonationWhereInput[]
  NOT?: Prisma.DonationWhereInput | Prisma.DonationWhereInput[]
  userId?: Prisma.StringNullableFilter<"Donation"> | string | null
  donorName?: Prisma.StringFilter<"Donation"> | string
  donorEmail?: Prisma.StringFilter<"Donation"> | string
  donorPhone?: Prisma.StringNullableFilter<"Donation"> | string | null
  programId?: Prisma.StringFilter<"Donation"> | string
  programPeriodId?: Prisma.StringFilter<"Donation"> | string
  verifiedByAdminId?: Prisma.StringNullableFilter<"Donation"> | string | null
  amount?: Prisma.DecimalFilter<"Donation"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFilter<"Donation"> | string
  paymentMethod?: Prisma.StringNullableFilter<"Donation"> | string | null
  bankAccountSender?: Prisma.StringNullableFilter<"Donation"> | string | null
  bankAccountReceiver?: Prisma.StringNullableFilter<"Donation"> | string | null
  verifiedAt?: Prisma.DateTimeNullableFilter<"Donation"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Donation"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Donation"> | Date | string
  donationProofs?: Prisma.DonationProofListRelationFilter
  program?: Prisma.XOR<Prisma.ProgramScalarRelationFilter, Prisma.ProgramWhereInput>
  programPeriod?: Prisma.XOR<Prisma.ProgramPeriodScalarRelationFilter, Prisma.ProgramPeriodWhereInput>
  verifiedByAdmin?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null
}, "id" | "donationReferenceNumber">

export type DonationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  donorName?: Prisma.SortOrder
  donorEmail?: Prisma.SortOrder
  donorPhone?: Prisma.SortOrderInput | Prisma.SortOrder
  programId?: Prisma.SortOrder
  programPeriodId?: Prisma.SortOrder
  verifiedByAdminId?: Prisma.SortOrderInput | Prisma.SortOrder
  amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrderInput | Prisma.SortOrder
  bankAccountSender?: Prisma.SortOrderInput | Prisma.SortOrder
  bankAccountReceiver?: Prisma.SortOrderInput | Prisma.SortOrder
  verifiedAt?: Prisma.SortOrderInput | Prisma.SortOrder
  donationReferenceNumber?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.DonationCountOrderByAggregateInput
  _avg?: Prisma.DonationAvgOrderByAggregateInput
  _max?: Prisma.DonationMaxOrderByAggregateInput
  _min?: Prisma.DonationMinOrderByAggregateInput
  _sum?: Prisma.DonationSumOrderByAggregateInput
}

export type DonationScalarWhereWithAggregatesInput = {
  AND?: Prisma.DonationScalarWhereWithAggregatesInput | Prisma.DonationScalarWhereWithAggregatesInput[]
  OR?: Prisma.DonationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DonationScalarWhereWithAggregatesInput | Prisma.DonationScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Donation"> | string
  userId?: Prisma.StringNullableWithAggregatesFilter<"Donation"> | string | null
  donorName?: Prisma.StringWithAggregatesFilter<"Donation"> | string
  donorEmail?: Prisma.StringWithAggregatesFilter<"Donation"> | string
  donorPhone?: Prisma.StringNullableWithAggregatesFilter<"Donation"> | string | null
  programId?: Prisma.StringWithAggregatesFilter<"Donation"> | string
  programPeriodId?: Prisma.StringWithAggregatesFilter<"Donation"> | string
  verifiedByAdminId?: Prisma.StringNullableWithAggregatesFilter<"Donation"> | string | null
  amount?: Prisma.DecimalWithAggregatesFilter<"Donation"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringWithAggregatesFilter<"Donation"> | string
  paymentMethod?: Prisma.StringNullableWithAggregatesFilter<"Donation"> | string | null
  bankAccountSender?: Prisma.StringNullableWithAggregatesFilter<"Donation"> | string | null
  bankAccountReceiver?: Prisma.StringNullableWithAggregatesFilter<"Donation"> | string | null
  verifiedAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Donation"> | Date | string | null
  donationReferenceNumber?: Prisma.StringWithAggregatesFilter<"Donation"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Donation"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Donation"> | Date | string
}

export type DonationCreateInput = {
  id?: string
  userId?: string | null
  donorName: string
  donorEmail: string
  donorPhone?: string | null
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: string
  paymentMethod?: string | null
  bankAccountSender?: string | null
  bankAccountReceiver?: string | null
  verifiedAt?: Date | string | null
  donationReferenceNumber: string
  createdAt?: Date | string
  updatedAt?: Date | string
  donationProofs?: Prisma.DonationProofCreateNestedManyWithoutDonationInput
  program: Prisma.ProgramCreateNestedOneWithoutDonationsInput
  programPeriod: Prisma.ProgramPeriodCreateNestedOneWithoutDonationsInput
  verifiedByAdmin?: Prisma.UserCreateNestedOneWithoutVerifiedDonationsInput
}

export type DonationUncheckedCreateInput = {
  id?: string
  userId?: string | null
  donorName: string
  donorEmail: string
  donorPhone?: string | null
  programId: string
  programPeriodId: string
  verifiedByAdminId?: string | null
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: string
  paymentMethod?: string | null
  bankAccountSender?: string | null
  bankAccountReceiver?: string | null
  verifiedAt?: Date | string | null
  donationReferenceNumber: string
  createdAt?: Date | string
  updatedAt?: Date | string
  donationProofs?: Prisma.DonationProofUncheckedCreateNestedManyWithoutDonationInput
}

export type DonationUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donorName?: Prisma.StringFieldUpdateOperationsInput | string
  donorEmail?: Prisma.StringFieldUpdateOperationsInput | string
  donorPhone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountSender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountReceiver?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  donationReferenceNumber?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  donationProofs?: Prisma.DonationProofUpdateManyWithoutDonationNestedInput
  program?: Prisma.ProgramUpdateOneRequiredWithoutDonationsNestedInput
  programPeriod?: Prisma.ProgramPeriodUpdateOneRequiredWithoutDonationsNestedInput
  verifiedByAdmin?: Prisma.UserUpdateOneWithoutVerifiedDonationsNestedInput
}

export type DonationUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donorName?: Prisma.StringFieldUpdateOperationsInput | string
  donorEmail?: Prisma.StringFieldUpdateOperationsInput | string
  donorPhone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  programPeriodId?: Prisma.StringFieldUpdateOperationsInput | string
  verifiedByAdminId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountSender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountReceiver?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  donationReferenceNumber?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  donationProofs?: Prisma.DonationProofUncheckedUpdateManyWithoutDonationNestedInput
}

export type DonationCreateManyInput = {
  id?: string
  userId?: string | null
  donorName: string
  donorEmail: string
  donorPhone?: string | null
  programId: string
  programPeriodId: string
  verifiedByAdminId?: string | null
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: string
  paymentMethod?: string | null
  bankAccountSender?: string | null
  bankAccountReceiver?: string | null
  verifiedAt?: Date | string | null
  donationReferenceNumber: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DonationUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donorName?: Prisma.StringFieldUpdateOperationsInput | string
  donorEmail?: Prisma.StringFieldUpdateOperationsInput | string
  donorPhone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountSender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountReceiver?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  donationReferenceNumber?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DonationUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donorName?: Prisma.StringFieldUpdateOperationsInput | string
  donorEmail?: Prisma.StringFieldUpdateOperationsInput | string
  donorPhone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  programPeriodId?: Prisma.StringFieldUpdateOperationsInput | string
  verifiedByAdminId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountSender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountReceiver?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  donationReferenceNumber?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DonationListRelationFilter = {
  every?: Prisma.DonationWhereInput
  some?: Prisma.DonationWhereInput
  none?: Prisma.DonationWhereInput
}

export type DonationOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DonationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  donorName?: Prisma.SortOrder
  donorEmail?: Prisma.SortOrder
  donorPhone?: Prisma.SortOrder
  programId?: Prisma.SortOrder
  programPeriodId?: Prisma.SortOrder
  verifiedByAdminId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrder
  bankAccountSender?: Prisma.SortOrder
  bankAccountReceiver?: Prisma.SortOrder
  verifiedAt?: Prisma.SortOrder
  donationReferenceNumber?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DonationAvgOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type DonationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  donorName?: Prisma.SortOrder
  donorEmail?: Prisma.SortOrder
  donorPhone?: Prisma.SortOrder
  programId?: Prisma.SortOrder
  programPeriodId?: Prisma.SortOrder
  verifiedByAdminId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrder
  bankAccountSender?: Prisma.SortOrder
  bankAccountReceiver?: Prisma.SortOrder
  verifiedAt?: Prisma.SortOrder
  donationReferenceNumber?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DonationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  donorName?: Prisma.SortOrder
  donorEmail?: Prisma.SortOrder
  donorPhone?: Prisma.SortOrder
  programId?: Prisma.SortOrder
  programPeriodId?: Prisma.SortOrder
  verifiedByAdminId?: Prisma.SortOrder
  amount?: Prisma.SortOrder
  status?: Prisma.SortOrder
  paymentMethod?: Prisma.SortOrder
  bankAccountSender?: Prisma.SortOrder
  bankAccountReceiver?: Prisma.SortOrder
  verifiedAt?: Prisma.SortOrder
  donationReferenceNumber?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DonationSumOrderByAggregateInput = {
  amount?: Prisma.SortOrder
}

export type DonationScalarRelationFilter = {
  is?: Prisma.DonationWhereInput
  isNot?: Prisma.DonationWhereInput
}

export type DonationCreateNestedManyWithoutVerifiedByAdminInput = {
  create?: Prisma.XOR<Prisma.DonationCreateWithoutVerifiedByAdminInput, Prisma.DonationUncheckedCreateWithoutVerifiedByAdminInput> | Prisma.DonationCreateWithoutVerifiedByAdminInput[] | Prisma.DonationUncheckedCreateWithoutVerifiedByAdminInput[]
  connectOrCreate?: Prisma.DonationCreateOrConnectWithoutVerifiedByAdminInput | Prisma.DonationCreateOrConnectWithoutVerifiedByAdminInput[]
  createMany?: Prisma.DonationCreateManyVerifiedByAdminInputEnvelope
  connect?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
}

export type DonationUncheckedCreateNestedManyWithoutVerifiedByAdminInput = {
  create?: Prisma.XOR<Prisma.DonationCreateWithoutVerifiedByAdminInput, Prisma.DonationUncheckedCreateWithoutVerifiedByAdminInput> | Prisma.DonationCreateWithoutVerifiedByAdminInput[] | Prisma.DonationUncheckedCreateWithoutVerifiedByAdminInput[]
  connectOrCreate?: Prisma.DonationCreateOrConnectWithoutVerifiedByAdminInput | Prisma.DonationCreateOrConnectWithoutVerifiedByAdminInput[]
  createMany?: Prisma.DonationCreateManyVerifiedByAdminInputEnvelope
  connect?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
}

export type DonationUpdateManyWithoutVerifiedByAdminNestedInput = {
  create?: Prisma.XOR<Prisma.DonationCreateWithoutVerifiedByAdminInput, Prisma.DonationUncheckedCreateWithoutVerifiedByAdminInput> | Prisma.DonationCreateWithoutVerifiedByAdminInput[] | Prisma.DonationUncheckedCreateWithoutVerifiedByAdminInput[]
  connectOrCreate?: Prisma.DonationCreateOrConnectWithoutVerifiedByAdminInput | Prisma.DonationCreateOrConnectWithoutVerifiedByAdminInput[]
  upsert?: Prisma.DonationUpsertWithWhereUniqueWithoutVerifiedByAdminInput | Prisma.DonationUpsertWithWhereUniqueWithoutVerifiedByAdminInput[]
  createMany?: Prisma.DonationCreateManyVerifiedByAdminInputEnvelope
  set?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  disconnect?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  delete?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  connect?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  update?: Prisma.DonationUpdateWithWhereUniqueWithoutVerifiedByAdminInput | Prisma.DonationUpdateWithWhereUniqueWithoutVerifiedByAdminInput[]
  updateMany?: Prisma.DonationUpdateManyWithWhereWithoutVerifiedByAdminInput | Prisma.DonationUpdateManyWithWhereWithoutVerifiedByAdminInput[]
  deleteMany?: Prisma.DonationScalarWhereInput | Prisma.DonationScalarWhereInput[]
}

export type DonationUncheckedUpdateManyWithoutVerifiedByAdminNestedInput = {
  create?: Prisma.XOR<Prisma.DonationCreateWithoutVerifiedByAdminInput, Prisma.DonationUncheckedCreateWithoutVerifiedByAdminInput> | Prisma.DonationCreateWithoutVerifiedByAdminInput[] | Prisma.DonationUncheckedCreateWithoutVerifiedByAdminInput[]
  connectOrCreate?: Prisma.DonationCreateOrConnectWithoutVerifiedByAdminInput | Prisma.DonationCreateOrConnectWithoutVerifiedByAdminInput[]
  upsert?: Prisma.DonationUpsertWithWhereUniqueWithoutVerifiedByAdminInput | Prisma.DonationUpsertWithWhereUniqueWithoutVerifiedByAdminInput[]
  createMany?: Prisma.DonationCreateManyVerifiedByAdminInputEnvelope
  set?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  disconnect?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  delete?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  connect?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  update?: Prisma.DonationUpdateWithWhereUniqueWithoutVerifiedByAdminInput | Prisma.DonationUpdateWithWhereUniqueWithoutVerifiedByAdminInput[]
  updateMany?: Prisma.DonationUpdateManyWithWhereWithoutVerifiedByAdminInput | Prisma.DonationUpdateManyWithWhereWithoutVerifiedByAdminInput[]
  deleteMany?: Prisma.DonationScalarWhereInput | Prisma.DonationScalarWhereInput[]
}

export type DecimalFieldUpdateOperationsInput = {
  set?: runtime.Decimal | runtime.DecimalJsLike | number | string
  increment?: runtime.Decimal | runtime.DecimalJsLike | number | string
  decrement?: runtime.Decimal | runtime.DecimalJsLike | number | string
  multiply?: runtime.Decimal | runtime.DecimalJsLike | number | string
  divide?: runtime.Decimal | runtime.DecimalJsLike | number | string
}

export type DonationCreateNestedOneWithoutDonationProofsInput = {
  create?: Prisma.XOR<Prisma.DonationCreateWithoutDonationProofsInput, Prisma.DonationUncheckedCreateWithoutDonationProofsInput>
  connectOrCreate?: Prisma.DonationCreateOrConnectWithoutDonationProofsInput
  connect?: Prisma.DonationWhereUniqueInput
}

export type DonationUpdateOneRequiredWithoutDonationProofsNestedInput = {
  create?: Prisma.XOR<Prisma.DonationCreateWithoutDonationProofsInput, Prisma.DonationUncheckedCreateWithoutDonationProofsInput>
  connectOrCreate?: Prisma.DonationCreateOrConnectWithoutDonationProofsInput
  upsert?: Prisma.DonationUpsertWithoutDonationProofsInput
  connect?: Prisma.DonationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DonationUpdateToOneWithWhereWithoutDonationProofsInput, Prisma.DonationUpdateWithoutDonationProofsInput>, Prisma.DonationUncheckedUpdateWithoutDonationProofsInput>
}

export type DonationCreateNestedManyWithoutProgramInput = {
  create?: Prisma.XOR<Prisma.DonationCreateWithoutProgramInput, Prisma.DonationUncheckedCreateWithoutProgramInput> | Prisma.DonationCreateWithoutProgramInput[] | Prisma.DonationUncheckedCreateWithoutProgramInput[]
  connectOrCreate?: Prisma.DonationCreateOrConnectWithoutProgramInput | Prisma.DonationCreateOrConnectWithoutProgramInput[]
  createMany?: Prisma.DonationCreateManyProgramInputEnvelope
  connect?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
}

export type DonationUncheckedCreateNestedManyWithoutProgramInput = {
  create?: Prisma.XOR<Prisma.DonationCreateWithoutProgramInput, Prisma.DonationUncheckedCreateWithoutProgramInput> | Prisma.DonationCreateWithoutProgramInput[] | Prisma.DonationUncheckedCreateWithoutProgramInput[]
  connectOrCreate?: Prisma.DonationCreateOrConnectWithoutProgramInput | Prisma.DonationCreateOrConnectWithoutProgramInput[]
  createMany?: Prisma.DonationCreateManyProgramInputEnvelope
  connect?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
}

export type DonationUpdateManyWithoutProgramNestedInput = {
  create?: Prisma.XOR<Prisma.DonationCreateWithoutProgramInput, Prisma.DonationUncheckedCreateWithoutProgramInput> | Prisma.DonationCreateWithoutProgramInput[] | Prisma.DonationUncheckedCreateWithoutProgramInput[]
  connectOrCreate?: Prisma.DonationCreateOrConnectWithoutProgramInput | Prisma.DonationCreateOrConnectWithoutProgramInput[]
  upsert?: Prisma.DonationUpsertWithWhereUniqueWithoutProgramInput | Prisma.DonationUpsertWithWhereUniqueWithoutProgramInput[]
  createMany?: Prisma.DonationCreateManyProgramInputEnvelope
  set?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  disconnect?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  delete?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  connect?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  update?: Prisma.DonationUpdateWithWhereUniqueWithoutProgramInput | Prisma.DonationUpdateWithWhereUniqueWithoutProgramInput[]
  updateMany?: Prisma.DonationUpdateManyWithWhereWithoutProgramInput | Prisma.DonationUpdateManyWithWhereWithoutProgramInput[]
  deleteMany?: Prisma.DonationScalarWhereInput | Prisma.DonationScalarWhereInput[]
}

export type DonationUncheckedUpdateManyWithoutProgramNestedInput = {
  create?: Prisma.XOR<Prisma.DonationCreateWithoutProgramInput, Prisma.DonationUncheckedCreateWithoutProgramInput> | Prisma.DonationCreateWithoutProgramInput[] | Prisma.DonationUncheckedCreateWithoutProgramInput[]
  connectOrCreate?: Prisma.DonationCreateOrConnectWithoutProgramInput | Prisma.DonationCreateOrConnectWithoutProgramInput[]
  upsert?: Prisma.DonationUpsertWithWhereUniqueWithoutProgramInput | Prisma.DonationUpsertWithWhereUniqueWithoutProgramInput[]
  createMany?: Prisma.DonationCreateManyProgramInputEnvelope
  set?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  disconnect?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  delete?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  connect?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  update?: Prisma.DonationUpdateWithWhereUniqueWithoutProgramInput | Prisma.DonationUpdateWithWhereUniqueWithoutProgramInput[]
  updateMany?: Prisma.DonationUpdateManyWithWhereWithoutProgramInput | Prisma.DonationUpdateManyWithWhereWithoutProgramInput[]
  deleteMany?: Prisma.DonationScalarWhereInput | Prisma.DonationScalarWhereInput[]
}

export type DonationCreateNestedManyWithoutProgramPeriodInput = {
  create?: Prisma.XOR<Prisma.DonationCreateWithoutProgramPeriodInput, Prisma.DonationUncheckedCreateWithoutProgramPeriodInput> | Prisma.DonationCreateWithoutProgramPeriodInput[] | Prisma.DonationUncheckedCreateWithoutProgramPeriodInput[]
  connectOrCreate?: Prisma.DonationCreateOrConnectWithoutProgramPeriodInput | Prisma.DonationCreateOrConnectWithoutProgramPeriodInput[]
  createMany?: Prisma.DonationCreateManyProgramPeriodInputEnvelope
  connect?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
}

export type DonationUncheckedCreateNestedManyWithoutProgramPeriodInput = {
  create?: Prisma.XOR<Prisma.DonationCreateWithoutProgramPeriodInput, Prisma.DonationUncheckedCreateWithoutProgramPeriodInput> | Prisma.DonationCreateWithoutProgramPeriodInput[] | Prisma.DonationUncheckedCreateWithoutProgramPeriodInput[]
  connectOrCreate?: Prisma.DonationCreateOrConnectWithoutProgramPeriodInput | Prisma.DonationCreateOrConnectWithoutProgramPeriodInput[]
  createMany?: Prisma.DonationCreateManyProgramPeriodInputEnvelope
  connect?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
}

export type DonationUpdateManyWithoutProgramPeriodNestedInput = {
  create?: Prisma.XOR<Prisma.DonationCreateWithoutProgramPeriodInput, Prisma.DonationUncheckedCreateWithoutProgramPeriodInput> | Prisma.DonationCreateWithoutProgramPeriodInput[] | Prisma.DonationUncheckedCreateWithoutProgramPeriodInput[]
  connectOrCreate?: Prisma.DonationCreateOrConnectWithoutProgramPeriodInput | Prisma.DonationCreateOrConnectWithoutProgramPeriodInput[]
  upsert?: Prisma.DonationUpsertWithWhereUniqueWithoutProgramPeriodInput | Prisma.DonationUpsertWithWhereUniqueWithoutProgramPeriodInput[]
  createMany?: Prisma.DonationCreateManyProgramPeriodInputEnvelope
  set?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  disconnect?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  delete?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  connect?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  update?: Prisma.DonationUpdateWithWhereUniqueWithoutProgramPeriodInput | Prisma.DonationUpdateWithWhereUniqueWithoutProgramPeriodInput[]
  updateMany?: Prisma.DonationUpdateManyWithWhereWithoutProgramPeriodInput | Prisma.DonationUpdateManyWithWhereWithoutProgramPeriodInput[]
  deleteMany?: Prisma.DonationScalarWhereInput | Prisma.DonationScalarWhereInput[]
}

export type DonationUncheckedUpdateManyWithoutProgramPeriodNestedInput = {
  create?: Prisma.XOR<Prisma.DonationCreateWithoutProgramPeriodInput, Prisma.DonationUncheckedCreateWithoutProgramPeriodInput> | Prisma.DonationCreateWithoutProgramPeriodInput[] | Prisma.DonationUncheckedCreateWithoutProgramPeriodInput[]
  connectOrCreate?: Prisma.DonationCreateOrConnectWithoutProgramPeriodInput | Prisma.DonationCreateOrConnectWithoutProgramPeriodInput[]
  upsert?: Prisma.DonationUpsertWithWhereUniqueWithoutProgramPeriodInput | Prisma.DonationUpsertWithWhereUniqueWithoutProgramPeriodInput[]
  createMany?: Prisma.DonationCreateManyProgramPeriodInputEnvelope
  set?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  disconnect?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  delete?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  connect?: Prisma.DonationWhereUniqueInput | Prisma.DonationWhereUniqueInput[]
  update?: Prisma.DonationUpdateWithWhereUniqueWithoutProgramPeriodInput | Prisma.DonationUpdateWithWhereUniqueWithoutProgramPeriodInput[]
  updateMany?: Prisma.DonationUpdateManyWithWhereWithoutProgramPeriodInput | Prisma.DonationUpdateManyWithWhereWithoutProgramPeriodInput[]
  deleteMany?: Prisma.DonationScalarWhereInput | Prisma.DonationScalarWhereInput[]
}

export type DonationCreateWithoutVerifiedByAdminInput = {
  id?: string
  userId?: string | null
  donorName: string
  donorEmail: string
  donorPhone?: string | null
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: string
  paymentMethod?: string | null
  bankAccountSender?: string | null
  bankAccountReceiver?: string | null
  verifiedAt?: Date | string | null
  donationReferenceNumber: string
  createdAt?: Date | string
  updatedAt?: Date | string
  donationProofs?: Prisma.DonationProofCreateNestedManyWithoutDonationInput
  program: Prisma.ProgramCreateNestedOneWithoutDonationsInput
  programPeriod: Prisma.ProgramPeriodCreateNestedOneWithoutDonationsInput
}

export type DonationUncheckedCreateWithoutVerifiedByAdminInput = {
  id?: string
  userId?: string | null
  donorName: string
  donorEmail: string
  donorPhone?: string | null
  programId: string
  programPeriodId: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: string
  paymentMethod?: string | null
  bankAccountSender?: string | null
  bankAccountReceiver?: string | null
  verifiedAt?: Date | string | null
  donationReferenceNumber: string
  createdAt?: Date | string
  updatedAt?: Date | string
  donationProofs?: Prisma.DonationProofUncheckedCreateNestedManyWithoutDonationInput
}

export type DonationCreateOrConnectWithoutVerifiedByAdminInput = {
  where: Prisma.DonationWhereUniqueInput
  create: Prisma.XOR<Prisma.DonationCreateWithoutVerifiedByAdminInput, Prisma.DonationUncheckedCreateWithoutVerifiedByAdminInput>
}

export type DonationCreateManyVerifiedByAdminInputEnvelope = {
  data: Prisma.DonationCreateManyVerifiedByAdminInput | Prisma.DonationCreateManyVerifiedByAdminInput[]
  skipDuplicates?: boolean
}

export type DonationUpsertWithWhereUniqueWithoutVerifiedByAdminInput = {
  where: Prisma.DonationWhereUniqueInput
  update: Prisma.XOR<Prisma.DonationUpdateWithoutVerifiedByAdminInput, Prisma.DonationUncheckedUpdateWithoutVerifiedByAdminInput>
  create: Prisma.XOR<Prisma.DonationCreateWithoutVerifiedByAdminInput, Prisma.DonationUncheckedCreateWithoutVerifiedByAdminInput>
}

export type DonationUpdateWithWhereUniqueWithoutVerifiedByAdminInput = {
  where: Prisma.DonationWhereUniqueInput
  data: Prisma.XOR<Prisma.DonationUpdateWithoutVerifiedByAdminInput, Prisma.DonationUncheckedUpdateWithoutVerifiedByAdminInput>
}

export type DonationUpdateManyWithWhereWithoutVerifiedByAdminInput = {
  where: Prisma.DonationScalarWhereInput
  data: Prisma.XOR<Prisma.DonationUpdateManyMutationInput, Prisma.DonationUncheckedUpdateManyWithoutVerifiedByAdminInput>
}

export type DonationScalarWhereInput = {
  AND?: Prisma.DonationScalarWhereInput | Prisma.DonationScalarWhereInput[]
  OR?: Prisma.DonationScalarWhereInput[]
  NOT?: Prisma.DonationScalarWhereInput | Prisma.DonationScalarWhereInput[]
  id?: Prisma.StringFilter<"Donation"> | string
  userId?: Prisma.StringNullableFilter<"Donation"> | string | null
  donorName?: Prisma.StringFilter<"Donation"> | string
  donorEmail?: Prisma.StringFilter<"Donation"> | string
  donorPhone?: Prisma.StringNullableFilter<"Donation"> | string | null
  programId?: Prisma.StringFilter<"Donation"> | string
  programPeriodId?: Prisma.StringFilter<"Donation"> | string
  verifiedByAdminId?: Prisma.StringNullableFilter<"Donation"> | string | null
  amount?: Prisma.DecimalFilter<"Donation"> | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFilter<"Donation"> | string
  paymentMethod?: Prisma.StringNullableFilter<"Donation"> | string | null
  bankAccountSender?: Prisma.StringNullableFilter<"Donation"> | string | null
  bankAccountReceiver?: Prisma.StringNullableFilter<"Donation"> | string | null
  verifiedAt?: Prisma.DateTimeNullableFilter<"Donation"> | Date | string | null
  donationReferenceNumber?: Prisma.StringFilter<"Donation"> | string
  createdAt?: Prisma.DateTimeFilter<"Donation"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Donation"> | Date | string
}

export type DonationCreateWithoutDonationProofsInput = {
  id?: string
  userId?: string | null
  donorName: string
  donorEmail: string
  donorPhone?: string | null
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: string
  paymentMethod?: string | null
  bankAccountSender?: string | null
  bankAccountReceiver?: string | null
  verifiedAt?: Date | string | null
  donationReferenceNumber: string
  createdAt?: Date | string
  updatedAt?: Date | string
  program: Prisma.ProgramCreateNestedOneWithoutDonationsInput
  programPeriod: Prisma.ProgramPeriodCreateNestedOneWithoutDonationsInput
  verifiedByAdmin?: Prisma.UserCreateNestedOneWithoutVerifiedDonationsInput
}

export type DonationUncheckedCreateWithoutDonationProofsInput = {
  id?: string
  userId?: string | null
  donorName: string
  donorEmail: string
  donorPhone?: string | null
  programId: string
  programPeriodId: string
  verifiedByAdminId?: string | null
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: string
  paymentMethod?: string | null
  bankAccountSender?: string | null
  bankAccountReceiver?: string | null
  verifiedAt?: Date | string | null
  donationReferenceNumber: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DonationCreateOrConnectWithoutDonationProofsInput = {
  where: Prisma.DonationWhereUniqueInput
  create: Prisma.XOR<Prisma.DonationCreateWithoutDonationProofsInput, Prisma.DonationUncheckedCreateWithoutDonationProofsInput>
}

export type DonationUpsertWithoutDonationProofsInput = {
  update: Prisma.XOR<Prisma.DonationUpdateWithoutDonationProofsInput, Prisma.DonationUncheckedUpdateWithoutDonationProofsInput>
  create: Prisma.XOR<Prisma.DonationCreateWithoutDonationProofsInput, Prisma.DonationUncheckedCreateWithoutDonationProofsInput>
  where?: Prisma.DonationWhereInput
}

export type DonationUpdateToOneWithWhereWithoutDonationProofsInput = {
  where?: Prisma.DonationWhereInput
  data: Prisma.XOR<Prisma.DonationUpdateWithoutDonationProofsInput, Prisma.DonationUncheckedUpdateWithoutDonationProofsInput>
}

export type DonationUpdateWithoutDonationProofsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donorName?: Prisma.StringFieldUpdateOperationsInput | string
  donorEmail?: Prisma.StringFieldUpdateOperationsInput | string
  donorPhone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountSender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountReceiver?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  donationReferenceNumber?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  program?: Prisma.ProgramUpdateOneRequiredWithoutDonationsNestedInput
  programPeriod?: Prisma.ProgramPeriodUpdateOneRequiredWithoutDonationsNestedInput
  verifiedByAdmin?: Prisma.UserUpdateOneWithoutVerifiedDonationsNestedInput
}

export type DonationUncheckedUpdateWithoutDonationProofsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donorName?: Prisma.StringFieldUpdateOperationsInput | string
  donorEmail?: Prisma.StringFieldUpdateOperationsInput | string
  donorPhone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  programPeriodId?: Prisma.StringFieldUpdateOperationsInput | string
  verifiedByAdminId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountSender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountReceiver?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  donationReferenceNumber?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DonationCreateWithoutProgramInput = {
  id?: string
  userId?: string | null
  donorName: string
  donorEmail: string
  donorPhone?: string | null
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: string
  paymentMethod?: string | null
  bankAccountSender?: string | null
  bankAccountReceiver?: string | null
  verifiedAt?: Date | string | null
  donationReferenceNumber: string
  createdAt?: Date | string
  updatedAt?: Date | string
  donationProofs?: Prisma.DonationProofCreateNestedManyWithoutDonationInput
  programPeriod: Prisma.ProgramPeriodCreateNestedOneWithoutDonationsInput
  verifiedByAdmin?: Prisma.UserCreateNestedOneWithoutVerifiedDonationsInput
}

export type DonationUncheckedCreateWithoutProgramInput = {
  id?: string
  userId?: string | null
  donorName: string
  donorEmail: string
  donorPhone?: string | null
  programPeriodId: string
  verifiedByAdminId?: string | null
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: string
  paymentMethod?: string | null
  bankAccountSender?: string | null
  bankAccountReceiver?: string | null
  verifiedAt?: Date | string | null
  donationReferenceNumber: string
  createdAt?: Date | string
  updatedAt?: Date | string
  donationProofs?: Prisma.DonationProofUncheckedCreateNestedManyWithoutDonationInput
}

export type DonationCreateOrConnectWithoutProgramInput = {
  where: Prisma.DonationWhereUniqueInput
  create: Prisma.XOR<Prisma.DonationCreateWithoutProgramInput, Prisma.DonationUncheckedCreateWithoutProgramInput>
}

export type DonationCreateManyProgramInputEnvelope = {
  data: Prisma.DonationCreateManyProgramInput | Prisma.DonationCreateManyProgramInput[]
  skipDuplicates?: boolean
}

export type DonationUpsertWithWhereUniqueWithoutProgramInput = {
  where: Prisma.DonationWhereUniqueInput
  update: Prisma.XOR<Prisma.DonationUpdateWithoutProgramInput, Prisma.DonationUncheckedUpdateWithoutProgramInput>
  create: Prisma.XOR<Prisma.DonationCreateWithoutProgramInput, Prisma.DonationUncheckedCreateWithoutProgramInput>
}

export type DonationUpdateWithWhereUniqueWithoutProgramInput = {
  where: Prisma.DonationWhereUniqueInput
  data: Prisma.XOR<Prisma.DonationUpdateWithoutProgramInput, Prisma.DonationUncheckedUpdateWithoutProgramInput>
}

export type DonationUpdateManyWithWhereWithoutProgramInput = {
  where: Prisma.DonationScalarWhereInput
  data: Prisma.XOR<Prisma.DonationUpdateManyMutationInput, Prisma.DonationUncheckedUpdateManyWithoutProgramInput>
}

export type DonationCreateWithoutProgramPeriodInput = {
  id?: string
  userId?: string | null
  donorName: string
  donorEmail: string
  donorPhone?: string | null
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: string
  paymentMethod?: string | null
  bankAccountSender?: string | null
  bankAccountReceiver?: string | null
  verifiedAt?: Date | string | null
  donationReferenceNumber: string
  createdAt?: Date | string
  updatedAt?: Date | string
  donationProofs?: Prisma.DonationProofCreateNestedManyWithoutDonationInput
  program: Prisma.ProgramCreateNestedOneWithoutDonationsInput
  verifiedByAdmin?: Prisma.UserCreateNestedOneWithoutVerifiedDonationsInput
}

export type DonationUncheckedCreateWithoutProgramPeriodInput = {
  id?: string
  userId?: string | null
  donorName: string
  donorEmail: string
  donorPhone?: string | null
  programId: string
  verifiedByAdminId?: string | null
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: string
  paymentMethod?: string | null
  bankAccountSender?: string | null
  bankAccountReceiver?: string | null
  verifiedAt?: Date | string | null
  donationReferenceNumber: string
  createdAt?: Date | string
  updatedAt?: Date | string
  donationProofs?: Prisma.DonationProofUncheckedCreateNestedManyWithoutDonationInput
}

export type DonationCreateOrConnectWithoutProgramPeriodInput = {
  where: Prisma.DonationWhereUniqueInput
  create: Prisma.XOR<Prisma.DonationCreateWithoutProgramPeriodInput, Prisma.DonationUncheckedCreateWithoutProgramPeriodInput>
}

export type DonationCreateManyProgramPeriodInputEnvelope = {
  data: Prisma.DonationCreateManyProgramPeriodInput | Prisma.DonationCreateManyProgramPeriodInput[]
  skipDuplicates?: boolean
}

export type DonationUpsertWithWhereUniqueWithoutProgramPeriodInput = {
  where: Prisma.DonationWhereUniqueInput
  update: Prisma.XOR<Prisma.DonationUpdateWithoutProgramPeriodInput, Prisma.DonationUncheckedUpdateWithoutProgramPeriodInput>
  create: Prisma.XOR<Prisma.DonationCreateWithoutProgramPeriodInput, Prisma.DonationUncheckedCreateWithoutProgramPeriodInput>
}

export type DonationUpdateWithWhereUniqueWithoutProgramPeriodInput = {
  where: Prisma.DonationWhereUniqueInput
  data: Prisma.XOR<Prisma.DonationUpdateWithoutProgramPeriodInput, Prisma.DonationUncheckedUpdateWithoutProgramPeriodInput>
}

export type DonationUpdateManyWithWhereWithoutProgramPeriodInput = {
  where: Prisma.DonationScalarWhereInput
  data: Prisma.XOR<Prisma.DonationUpdateManyMutationInput, Prisma.DonationUncheckedUpdateManyWithoutProgramPeriodInput>
}

export type DonationCreateManyVerifiedByAdminInput = {
  id?: string
  userId?: string | null
  donorName: string
  donorEmail: string
  donorPhone?: string | null
  programId: string
  programPeriodId: string
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: string
  paymentMethod?: string | null
  bankAccountSender?: string | null
  bankAccountReceiver?: string | null
  verifiedAt?: Date | string | null
  donationReferenceNumber: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DonationUpdateWithoutVerifiedByAdminInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donorName?: Prisma.StringFieldUpdateOperationsInput | string
  donorEmail?: Prisma.StringFieldUpdateOperationsInput | string
  donorPhone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountSender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountReceiver?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  donationReferenceNumber?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  donationProofs?: Prisma.DonationProofUpdateManyWithoutDonationNestedInput
  program?: Prisma.ProgramUpdateOneRequiredWithoutDonationsNestedInput
  programPeriod?: Prisma.ProgramPeriodUpdateOneRequiredWithoutDonationsNestedInput
}

export type DonationUncheckedUpdateWithoutVerifiedByAdminInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donorName?: Prisma.StringFieldUpdateOperationsInput | string
  donorEmail?: Prisma.StringFieldUpdateOperationsInput | string
  donorPhone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  programPeriodId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountSender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountReceiver?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  donationReferenceNumber?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  donationProofs?: Prisma.DonationProofUncheckedUpdateManyWithoutDonationNestedInput
}

export type DonationUncheckedUpdateManyWithoutVerifiedByAdminInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donorName?: Prisma.StringFieldUpdateOperationsInput | string
  donorEmail?: Prisma.StringFieldUpdateOperationsInput | string
  donorPhone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  programPeriodId?: Prisma.StringFieldUpdateOperationsInput | string
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountSender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountReceiver?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  donationReferenceNumber?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DonationCreateManyProgramInput = {
  id?: string
  userId?: string | null
  donorName: string
  donorEmail: string
  donorPhone?: string | null
  programPeriodId: string
  verifiedByAdminId?: string | null
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: string
  paymentMethod?: string | null
  bankAccountSender?: string | null
  bankAccountReceiver?: string | null
  verifiedAt?: Date | string | null
  donationReferenceNumber: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DonationUpdateWithoutProgramInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donorName?: Prisma.StringFieldUpdateOperationsInput | string
  donorEmail?: Prisma.StringFieldUpdateOperationsInput | string
  donorPhone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountSender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountReceiver?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  donationReferenceNumber?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  donationProofs?: Prisma.DonationProofUpdateManyWithoutDonationNestedInput
  programPeriod?: Prisma.ProgramPeriodUpdateOneRequiredWithoutDonationsNestedInput
  verifiedByAdmin?: Prisma.UserUpdateOneWithoutVerifiedDonationsNestedInput
}

export type DonationUncheckedUpdateWithoutProgramInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donorName?: Prisma.StringFieldUpdateOperationsInput | string
  donorEmail?: Prisma.StringFieldUpdateOperationsInput | string
  donorPhone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  programPeriodId?: Prisma.StringFieldUpdateOperationsInput | string
  verifiedByAdminId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountSender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountReceiver?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  donationReferenceNumber?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  donationProofs?: Prisma.DonationProofUncheckedUpdateManyWithoutDonationNestedInput
}

export type DonationUncheckedUpdateManyWithoutProgramInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donorName?: Prisma.StringFieldUpdateOperationsInput | string
  donorEmail?: Prisma.StringFieldUpdateOperationsInput | string
  donorPhone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  programPeriodId?: Prisma.StringFieldUpdateOperationsInput | string
  verifiedByAdminId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountSender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountReceiver?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  donationReferenceNumber?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DonationCreateManyProgramPeriodInput = {
  id?: string
  userId?: string | null
  donorName: string
  donorEmail: string
  donorPhone?: string | null
  programId: string
  verifiedByAdminId?: string | null
  amount: runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: string
  paymentMethod?: string | null
  bankAccountSender?: string | null
  bankAccountReceiver?: string | null
  verifiedAt?: Date | string | null
  donationReferenceNumber: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DonationUpdateWithoutProgramPeriodInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donorName?: Prisma.StringFieldUpdateOperationsInput | string
  donorEmail?: Prisma.StringFieldUpdateOperationsInput | string
  donorPhone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountSender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountReceiver?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  donationReferenceNumber?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  donationProofs?: Prisma.DonationProofUpdateManyWithoutDonationNestedInput
  program?: Prisma.ProgramUpdateOneRequiredWithoutDonationsNestedInput
  verifiedByAdmin?: Prisma.UserUpdateOneWithoutVerifiedDonationsNestedInput
}

export type DonationUncheckedUpdateWithoutProgramPeriodInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donorName?: Prisma.StringFieldUpdateOperationsInput | string
  donorEmail?: Prisma.StringFieldUpdateOperationsInput | string
  donorPhone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  verifiedByAdminId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountSender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountReceiver?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  donationReferenceNumber?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  donationProofs?: Prisma.DonationProofUncheckedUpdateManyWithoutDonationNestedInput
}

export type DonationUncheckedUpdateManyWithoutProgramPeriodInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  donorName?: Prisma.StringFieldUpdateOperationsInput | string
  donorEmail?: Prisma.StringFieldUpdateOperationsInput | string
  donorPhone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  programId?: Prisma.StringFieldUpdateOperationsInput | string
  verifiedByAdminId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  amount?: Prisma.DecimalFieldUpdateOperationsInput | runtime.Decimal | runtime.DecimalJsLike | number | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  paymentMethod?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountSender?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  bankAccountReceiver?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  verifiedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  donationReferenceNumber?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type DonationCountOutputType
 */

export type DonationCountOutputType = {
  donationProofs: number
}

export type DonationCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  donationProofs?: boolean | DonationCountOutputTypeCountDonationProofsArgs
}

/**
 * DonationCountOutputType without action
 */
export type DonationCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonationCountOutputType
   */
  select?: Prisma.DonationCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DonationCountOutputType without action
 */
export type DonationCountOutputTypeCountDonationProofsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DonationProofWhereInput
}


export type DonationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  donorName?: boolean
  donorEmail?: boolean
  donorPhone?: boolean
  programId?: boolean
  programPeriodId?: boolean
  verifiedByAdminId?: boolean
  amount?: boolean
  status?: boolean
  paymentMethod?: boolean
  bankAccountSender?: boolean
  bankAccountReceiver?: boolean
  verifiedAt?: boolean
  donationReferenceNumber?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  donationProofs?: boolean | Prisma.Donation$donationProofsArgs<ExtArgs>
  program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
  programPeriod?: boolean | Prisma.ProgramPeriodDefaultArgs<ExtArgs>
  verifiedByAdmin?: boolean | Prisma.Donation$verifiedByAdminArgs<ExtArgs>
  _count?: boolean | Prisma.DonationCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["donation"]>

export type DonationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  donorName?: boolean
  donorEmail?: boolean
  donorPhone?: boolean
  programId?: boolean
  programPeriodId?: boolean
  verifiedByAdminId?: boolean
  amount?: boolean
  status?: boolean
  paymentMethod?: boolean
  bankAccountSender?: boolean
  bankAccountReceiver?: boolean
  verifiedAt?: boolean
  donationReferenceNumber?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
  programPeriod?: boolean | Prisma.ProgramPeriodDefaultArgs<ExtArgs>
  verifiedByAdmin?: boolean | Prisma.Donation$verifiedByAdminArgs<ExtArgs>
}, ExtArgs["result"]["donation"]>

export type DonationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  donorName?: boolean
  donorEmail?: boolean
  donorPhone?: boolean
  programId?: boolean
  programPeriodId?: boolean
  verifiedByAdminId?: boolean
  amount?: boolean
  status?: boolean
  paymentMethod?: boolean
  bankAccountSender?: boolean
  bankAccountReceiver?: boolean
  verifiedAt?: boolean
  donationReferenceNumber?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
  programPeriod?: boolean | Prisma.ProgramPeriodDefaultArgs<ExtArgs>
  verifiedByAdmin?: boolean | Prisma.Donation$verifiedByAdminArgs<ExtArgs>
}, ExtArgs["result"]["donation"]>

export type DonationSelectScalar = {
  id?: boolean
  userId?: boolean
  donorName?: boolean
  donorEmail?: boolean
  donorPhone?: boolean
  programId?: boolean
  programPeriodId?: boolean
  verifiedByAdminId?: boolean
  amount?: boolean
  status?: boolean
  paymentMethod?: boolean
  bankAccountSender?: boolean
  bankAccountReceiver?: boolean
  verifiedAt?: boolean
  donationReferenceNumber?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type DonationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "donorName" | "donorEmail" | "donorPhone" | "programId" | "programPeriodId" | "verifiedByAdminId" | "amount" | "status" | "paymentMethod" | "bankAccountSender" | "bankAccountReceiver" | "verifiedAt" | "donationReferenceNumber" | "createdAt" | "updatedAt", ExtArgs["result"]["donation"]>
export type DonationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  donationProofs?: boolean | Prisma.Donation$donationProofsArgs<ExtArgs>
  program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
  programPeriod?: boolean | Prisma.ProgramPeriodDefaultArgs<ExtArgs>
  verifiedByAdmin?: boolean | Prisma.Donation$verifiedByAdminArgs<ExtArgs>
  _count?: boolean | Prisma.DonationCountOutputTypeDefaultArgs<ExtArgs>
}
export type DonationIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
  programPeriod?: boolean | Prisma.ProgramPeriodDefaultArgs<ExtArgs>
  verifiedByAdmin?: boolean | Prisma.Donation$verifiedByAdminArgs<ExtArgs>
}
export type DonationIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  program?: boolean | Prisma.ProgramDefaultArgs<ExtArgs>
  programPeriod?: boolean | Prisma.ProgramPeriodDefaultArgs<ExtArgs>
  verifiedByAdmin?: boolean | Prisma.Donation$verifiedByAdminArgs<ExtArgs>
}

export type $DonationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Donation"
  objects: {
    donationProofs: Prisma.$DonationProofPayload<ExtArgs>[]
    program: Prisma.$ProgramPayload<ExtArgs>
    programPeriod: Prisma.$ProgramPeriodPayload<ExtArgs>
    verifiedByAdmin: Prisma.$UserPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string | null
    donorName: string
    donorEmail: string
    donorPhone: string | null
    programId: string
    programPeriodId: string
    verifiedByAdminId: string | null
    amount: runtime.Decimal
    status: string
    paymentMethod: string | null
    bankAccountSender: string | null
    bankAccountReceiver: string | null
    verifiedAt: Date | null
    donationReferenceNumber: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["donation"]>
  composites: {}
}

export type DonationGetPayload<S extends boolean | null | undefined | DonationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DonationPayload, S>

export type DonationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DonationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DonationCountAggregateInputType | true
  }

export interface DonationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Donation'], meta: { name: 'Donation' } }
  /**
   * Find zero or one Donation that matches the filter.
   * @param {DonationFindUniqueArgs} args - Arguments to find a Donation
   * @example
   * // Get one Donation
   * const donation = await prisma.donation.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DonationFindUniqueArgs>(args: Prisma.SelectSubset<T, DonationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DonationClient<runtime.Types.Result.GetResult<Prisma.$DonationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Donation that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DonationFindUniqueOrThrowArgs} args - Arguments to find a Donation
   * @example
   * // Get one Donation
   * const donation = await prisma.donation.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DonationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DonationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DonationClient<runtime.Types.Result.GetResult<Prisma.$DonationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Donation that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DonationFindFirstArgs} args - Arguments to find a Donation
   * @example
   * // Get one Donation
   * const donation = await prisma.donation.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DonationFindFirstArgs>(args?: Prisma.SelectSubset<T, DonationFindFirstArgs<ExtArgs>>): Prisma.Prisma__DonationClient<runtime.Types.Result.GetResult<Prisma.$DonationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Donation that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DonationFindFirstOrThrowArgs} args - Arguments to find a Donation
   * @example
   * // Get one Donation
   * const donation = await prisma.donation.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DonationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DonationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DonationClient<runtime.Types.Result.GetResult<Prisma.$DonationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Donations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DonationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Donations
   * const donations = await prisma.donation.findMany()
   * 
   * // Get first 10 Donations
   * const donations = await prisma.donation.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const donationWithIdOnly = await prisma.donation.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DonationFindManyArgs>(args?: Prisma.SelectSubset<T, DonationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DonationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Donation.
   * @param {DonationCreateArgs} args - Arguments to create a Donation.
   * @example
   * // Create one Donation
   * const Donation = await prisma.donation.create({
   *   data: {
   *     // ... data to create a Donation
   *   }
   * })
   * 
   */
  create<T extends DonationCreateArgs>(args: Prisma.SelectSubset<T, DonationCreateArgs<ExtArgs>>): Prisma.Prisma__DonationClient<runtime.Types.Result.GetResult<Prisma.$DonationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Donations.
   * @param {DonationCreateManyArgs} args - Arguments to create many Donations.
   * @example
   * // Create many Donations
   * const donation = await prisma.donation.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DonationCreateManyArgs>(args?: Prisma.SelectSubset<T, DonationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Donations and returns the data saved in the database.
   * @param {DonationCreateManyAndReturnArgs} args - Arguments to create many Donations.
   * @example
   * // Create many Donations
   * const donation = await prisma.donation.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Donations and only return the `id`
   * const donationWithIdOnly = await prisma.donation.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DonationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DonationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DonationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Donation.
   * @param {DonationDeleteArgs} args - Arguments to delete one Donation.
   * @example
   * // Delete one Donation
   * const Donation = await prisma.donation.delete({
   *   where: {
   *     // ... filter to delete one Donation
   *   }
   * })
   * 
   */
  delete<T extends DonationDeleteArgs>(args: Prisma.SelectSubset<T, DonationDeleteArgs<ExtArgs>>): Prisma.Prisma__DonationClient<runtime.Types.Result.GetResult<Prisma.$DonationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Donation.
   * @param {DonationUpdateArgs} args - Arguments to update one Donation.
   * @example
   * // Update one Donation
   * const donation = await prisma.donation.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DonationUpdateArgs>(args: Prisma.SelectSubset<T, DonationUpdateArgs<ExtArgs>>): Prisma.Prisma__DonationClient<runtime.Types.Result.GetResult<Prisma.$DonationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Donations.
   * @param {DonationDeleteManyArgs} args - Arguments to filter Donations to delete.
   * @example
   * // Delete a few Donations
   * const { count } = await prisma.donation.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DonationDeleteManyArgs>(args?: Prisma.SelectSubset<T, DonationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Donations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DonationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Donations
   * const donation = await prisma.donation.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DonationUpdateManyArgs>(args: Prisma.SelectSubset<T, DonationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Donations and returns the data updated in the database.
   * @param {DonationUpdateManyAndReturnArgs} args - Arguments to update many Donations.
   * @example
   * // Update many Donations
   * const donation = await prisma.donation.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Donations and only return the `id`
   * const donationWithIdOnly = await prisma.donation.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DonationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DonationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DonationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Donation.
   * @param {DonationUpsertArgs} args - Arguments to update or create a Donation.
   * @example
   * // Update or create a Donation
   * const donation = await prisma.donation.upsert({
   *   create: {
   *     // ... data to create a Donation
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Donation we want to update
   *   }
   * })
   */
  upsert<T extends DonationUpsertArgs>(args: Prisma.SelectSubset<T, DonationUpsertArgs<ExtArgs>>): Prisma.Prisma__DonationClient<runtime.Types.Result.GetResult<Prisma.$DonationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Donations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DonationCountArgs} args - Arguments to filter Donations to count.
   * @example
   * // Count the number of Donations
   * const count = await prisma.donation.count({
   *   where: {
   *     // ... the filter for the Donations we want to count
   *   }
   * })
  **/
  count<T extends DonationCountArgs>(
    args?: Prisma.Subset<T, DonationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DonationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Donation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DonationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DonationAggregateArgs>(args: Prisma.Subset<T, DonationAggregateArgs>): Prisma.PrismaPromise<GetDonationAggregateType<T>>

  /**
   * Group by Donation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DonationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DonationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DonationGroupByArgs['orderBy'] }
      : { orderBy?: DonationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DonationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDonationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Donation model
 */
readonly fields: DonationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Donation.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DonationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  donationProofs<T extends Prisma.Donation$donationProofsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Donation$donationProofsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DonationProofPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  program<T extends Prisma.ProgramDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProgramDefaultArgs<ExtArgs>>): Prisma.Prisma__ProgramClient<runtime.Types.Result.GetResult<Prisma.$ProgramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  programPeriod<T extends Prisma.ProgramPeriodDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProgramPeriodDefaultArgs<ExtArgs>>): Prisma.Prisma__ProgramPeriodClient<runtime.Types.Result.GetResult<Prisma.$ProgramPeriodPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  verifiedByAdmin<T extends Prisma.Donation$verifiedByAdminArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Donation$verifiedByAdminArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Donation model
 */
export interface DonationFieldRefs {
  readonly id: Prisma.FieldRef<"Donation", 'String'>
  readonly userId: Prisma.FieldRef<"Donation", 'String'>
  readonly donorName: Prisma.FieldRef<"Donation", 'String'>
  readonly donorEmail: Prisma.FieldRef<"Donation", 'String'>
  readonly donorPhone: Prisma.FieldRef<"Donation", 'String'>
  readonly programId: Prisma.FieldRef<"Donation", 'String'>
  readonly programPeriodId: Prisma.FieldRef<"Donation", 'String'>
  readonly verifiedByAdminId: Prisma.FieldRef<"Donation", 'String'>
  readonly amount: Prisma.FieldRef<"Donation", 'Decimal'>
  readonly status: Prisma.FieldRef<"Donation", 'String'>
  readonly paymentMethod: Prisma.FieldRef<"Donation", 'String'>
  readonly bankAccountSender: Prisma.FieldRef<"Donation", 'String'>
  readonly bankAccountReceiver: Prisma.FieldRef<"Donation", 'String'>
  readonly verifiedAt: Prisma.FieldRef<"Donation", 'DateTime'>
  readonly donationReferenceNumber: Prisma.FieldRef<"Donation", 'String'>
  readonly createdAt: Prisma.FieldRef<"Donation", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Donation", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Donation findUnique
 */
export type DonationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Donation
   */
  select?: Prisma.DonationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Donation
   */
  omit?: Prisma.DonationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationInclude<ExtArgs> | null
  /**
   * Filter, which Donation to fetch.
   */
  where: Prisma.DonationWhereUniqueInput
}

/**
 * Donation findUniqueOrThrow
 */
export type DonationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Donation
   */
  select?: Prisma.DonationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Donation
   */
  omit?: Prisma.DonationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationInclude<ExtArgs> | null
  /**
   * Filter, which Donation to fetch.
   */
  where: Prisma.DonationWhereUniqueInput
}

/**
 * Donation findFirst
 */
export type DonationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Donation
   */
  select?: Prisma.DonationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Donation
   */
  omit?: Prisma.DonationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationInclude<ExtArgs> | null
  /**
   * Filter, which Donation to fetch.
   */
  where?: Prisma.DonationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Donations to fetch.
   */
  orderBy?: Prisma.DonationOrderByWithRelationInput | Prisma.DonationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Donations.
   */
  cursor?: Prisma.DonationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Donations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Donations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Donations.
   */
  distinct?: Prisma.DonationScalarFieldEnum | Prisma.DonationScalarFieldEnum[]
}

/**
 * Donation findFirstOrThrow
 */
export type DonationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Donation
   */
  select?: Prisma.DonationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Donation
   */
  omit?: Prisma.DonationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationInclude<ExtArgs> | null
  /**
   * Filter, which Donation to fetch.
   */
  where?: Prisma.DonationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Donations to fetch.
   */
  orderBy?: Prisma.DonationOrderByWithRelationInput | Prisma.DonationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Donations.
   */
  cursor?: Prisma.DonationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Donations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Donations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Donations.
   */
  distinct?: Prisma.DonationScalarFieldEnum | Prisma.DonationScalarFieldEnum[]
}

/**
 * Donation findMany
 */
export type DonationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Donation
   */
  select?: Prisma.DonationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Donation
   */
  omit?: Prisma.DonationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationInclude<ExtArgs> | null
  /**
   * Filter, which Donations to fetch.
   */
  where?: Prisma.DonationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Donations to fetch.
   */
  orderBy?: Prisma.DonationOrderByWithRelationInput | Prisma.DonationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Donations.
   */
  cursor?: Prisma.DonationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Donations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Donations.
   */
  skip?: number
  distinct?: Prisma.DonationScalarFieldEnum | Prisma.DonationScalarFieldEnum[]
}

/**
 * Donation create
 */
export type DonationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Donation
   */
  select?: Prisma.DonationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Donation
   */
  omit?: Prisma.DonationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationInclude<ExtArgs> | null
  /**
   * The data needed to create a Donation.
   */
  data: Prisma.XOR<Prisma.DonationCreateInput, Prisma.DonationUncheckedCreateInput>
}

/**
 * Donation createMany
 */
export type DonationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Donations.
   */
  data: Prisma.DonationCreateManyInput | Prisma.DonationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Donation createManyAndReturn
 */
export type DonationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Donation
   */
  select?: Prisma.DonationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Donation
   */
  omit?: Prisma.DonationOmit<ExtArgs> | null
  /**
   * The data used to create many Donations.
   */
  data: Prisma.DonationCreateManyInput | Prisma.DonationCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Donation update
 */
export type DonationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Donation
   */
  select?: Prisma.DonationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Donation
   */
  omit?: Prisma.DonationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationInclude<ExtArgs> | null
  /**
   * The data needed to update a Donation.
   */
  data: Prisma.XOR<Prisma.DonationUpdateInput, Prisma.DonationUncheckedUpdateInput>
  /**
   * Choose, which Donation to update.
   */
  where: Prisma.DonationWhereUniqueInput
}

/**
 * Donation updateMany
 */
export type DonationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Donations.
   */
  data: Prisma.XOR<Prisma.DonationUpdateManyMutationInput, Prisma.DonationUncheckedUpdateManyInput>
  /**
   * Filter which Donations to update
   */
  where?: Prisma.DonationWhereInput
  /**
   * Limit how many Donations to update.
   */
  limit?: number
}

/**
 * Donation updateManyAndReturn
 */
export type DonationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Donation
   */
  select?: Prisma.DonationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Donation
   */
  omit?: Prisma.DonationOmit<ExtArgs> | null
  /**
   * The data used to update Donations.
   */
  data: Prisma.XOR<Prisma.DonationUpdateManyMutationInput, Prisma.DonationUncheckedUpdateManyInput>
  /**
   * Filter which Donations to update
   */
  where?: Prisma.DonationWhereInput
  /**
   * Limit how many Donations to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Donation upsert
 */
export type DonationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Donation
   */
  select?: Prisma.DonationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Donation
   */
  omit?: Prisma.DonationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationInclude<ExtArgs> | null
  /**
   * The filter to search for the Donation to update in case it exists.
   */
  where: Prisma.DonationWhereUniqueInput
  /**
   * In case the Donation found by the `where` argument doesn't exist, create a new Donation with this data.
   */
  create: Prisma.XOR<Prisma.DonationCreateInput, Prisma.DonationUncheckedCreateInput>
  /**
   * In case the Donation was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DonationUpdateInput, Prisma.DonationUncheckedUpdateInput>
}

/**
 * Donation delete
 */
export type DonationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Donation
   */
  select?: Prisma.DonationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Donation
   */
  omit?: Prisma.DonationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationInclude<ExtArgs> | null
  /**
   * Filter which Donation to delete.
   */
  where: Prisma.DonationWhereUniqueInput
}

/**
 * Donation deleteMany
 */
export type DonationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Donations to delete
   */
  where?: Prisma.DonationWhereInput
  /**
   * Limit how many Donations to delete.
   */
  limit?: number
}

/**
 * Donation.donationProofs
 */
export type Donation$donationProofsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DonationProof
   */
  select?: Prisma.DonationProofSelect<ExtArgs> | null
  /**
   * Omit specific fields from the DonationProof
   */
  omit?: Prisma.DonationProofOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationProofInclude<ExtArgs> | null
  where?: Prisma.DonationProofWhereInput
  orderBy?: Prisma.DonationProofOrderByWithRelationInput | Prisma.DonationProofOrderByWithRelationInput[]
  cursor?: Prisma.DonationProofWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DonationProofScalarFieldEnum | Prisma.DonationProofScalarFieldEnum[]
}

/**
 * Donation.verifiedByAdmin
 */
export type Donation$verifiedByAdminArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
}

/**
 * Donation without action
 */
export type DonationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Donation
   */
  select?: Prisma.DonationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Donation
   */
  omit?: Prisma.DonationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DonationInclude<ExtArgs> | null
}
