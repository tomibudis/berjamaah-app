model Donation {
  id                      String          @id @default(cuid())
  userId                  String?         @map("user_id")
  donorName               String          @map("donor_name")
  donorEmail              String          @map("donor_email")
  donorPhone              String?         @map("donor_phone")
  programId               String          @map("program_id")
  programPeriodId         String          @map("program_period_id")
  verifiedByAdminId       String?         @map("verified_by_admin_id")
  amount                  Decimal         @db.Decimal(15, 2)
  status                  String          @default("pending_verification")
  paymentMethod           String?         @map("payment_method")
  bankAccountSender       String?         @map("bank_account_sender")
  bankAccountReceiver     String?         @map("bank_account_receiver")
  verifiedAt              DateTime?       @map("verified_at")
  donationReferenceNumber String          @unique @map("donation_reference_number")
  createdAt               DateTime        @default(now()) @map("created_at")
  updatedAt               DateTime        @updatedAt @map("updated_at")
  donationProofs          DonationProof[]
  program                 Program         @relation(fields: [programId], references: [id])
  programPeriod           ProgramPeriod   @relation(fields: [programPeriodId], references: [id])
  verifiedByAdmin         User?           @relation("VerifiedByAdmin", fields: [verifiedByAdminId], references: [id])

  @@map("donations")
}

model DonationProof {
  id         String   @id @default(cuid())
  donationId String   @map("donation_id")
  imagePath  String   @map("image_path")
  imageName  String   @map("image_name")
  fileSize   Int      @map("file_size")
  uploadedAt DateTime @default(now()) @map("uploaded_at")
  donation   Donation @relation(fields: [donationId], references: [id], onDelete: Cascade)

  @@map("donation_proofs")
}
